function [mu_sig,L_sig] = generate_priors(nn,Tris,x,y,theta,npriors,prior_corr_length,do_plot)
%generate_priors Creates priors and returns regularisation matrix (L)
%   ..

% % Read in lungs
% [data_left,shift_left,~] = read_bspline_file('export_lung_left_param_test.txt');
% [data_rght,shift_rght,~] = read_bspline_file('export_lung_rght_param_test.txt');
% % rho for the theta of each boundary node
% theta_lung = linspace(0,2*pi,201)'; theta_lung = theta_lung(1:end-1);
% rtheta_left = evaluate_mesh_bspline(data_left(:,2), data_left(:,1), theta_lung);
% rtheta_rght = evaluate_mesh_bspline(data_rght(:,2), data_rght(:,1), theta_lung);
% [x_left,y_left] = pol2cart(theta_lung,rtheta_left);
% [x_rght,y_rght] = pol2cart(theta_lung,rtheta_rght);
% x_left = x_left + shift_left(1); y_left = y_left + shift_left(2);
% x_rght = x_rght + shift_rght(1); y_rght = y_rght + shift_rght(2);
% x_left = x_left + 165; y_left = y_left + 180;
% x_rght = x_rght + 165; y_rght = y_rght + 180;
% lung_left = inpolygon(x,y,x_left,y_left);
% lung_rght = inpolygon(x,y,x_rght,y_rght);
% lungs = or(lung_left,lung_rght);
% 
% % Smooth probability function for lung shape
% sig = @(r,m,s) 1./(1 + exp(-s.*(r-m)));  % sigmoid function
% for i = 1:nn
%     x_left = (x(i)+shift_left(1)+165);
%     y_left = (y(i)+shift_left(2)+180);
%     x_rght = (x(i)+shift_rght(1)+165);
%     y_rght = (y(i)+shift_rght(2)+180);
%     % need radius from lung centre for each node
%     rn_left = (x_left^2 + y_left^2)^.5;
%     rn_rght = (x_rght^2 + y_rght^2)^.5;
%     % need theta relative to lung centre for each node
%     thetan_left = atan2(y_left, x_left);
%     thetan_rght = atan2(y_rght, x_rght);
%     % radius of lung (mean) at each node theta
%     rntheta_left = evaluate_mesh_bspline(data_left(:,2), data_left(:,1)-pi, thetan_left);
%     rntheta_rght = evaluate_mesh_bspline(data_rght(:,2), data_rght(:,1)-pi, thetan_rght);
%     % probability at the node
%     var_temp = 15;  % 15
%     p_lung_left(i) = 1 - sig(rn_left,rntheta_left,1/var_temp);
%     p_lung_rght(i) = 1 - sig(rn_rght,rntheta_rght,1/var_temp);
% end
% 
% p_lung = p_lung_left + p_lung_rght;
% 
% figure(999);
% % trisurf(Tris,x,y,rn_left)
% trisurf(Tris,x,y,p_lung)
% % hold on, plot3(shift_left(1)+165,shift_left(2)+180,1e3,'xr')
% % hold on, plot3(shift_rght(1)+165,shift_rght(2)+180,1e3,'xr')
% % hold on, plot3(x([1485,194,157,1077]),y([1485,194,157,1077]),1e2*ones(4,1),'xr')
% % hold on, plot3(0,0,1e3,'+k')
% view(2), shading interp, daspect([1,1,1]), %axis off, 


% % % Probability information
mu_sig_orig = readmatrix('./geom/TEST_HLA-H11303_predicted/TEST_lung_nodes_mean.csv');
% mu_sig = 0*mu_sig
size(mu_sig_orig)
min(min(mu_sig_orig)),max(max(mu_sig_orig)),min(diag(mu_sig_orig)),max(diag(mu_sig_orig)) % PRINTS!
c_lung_orig = readmatrix('./geom/TEST_HLA-H11303_predicted/TEST_lung_nodes_cov.csv');
% % plot
% x_samples = linspace(min(x),max(x),1e3); y_samples = 0*x_samples;
% F = scatteredInterpolant(x,y,mu_sig); z1 = F(x_samples,y_samples);
% F = scatteredInterpolant(x,y,mu_sig+diag(c_lung)); z2 = F(x_samples,y_samples);
% F = scatteredInterpolant(x,y,mu_sig-diag(c_lung)); z3 = F(x_samples,y_samples);
% figure(999), hold on
% plot(x_samples,z1,'k-')
% plot(x_samples,z2,'k--')
% plot(x_samples,z3,'k--')
% sd_lung = diag(c_lung).^0.5;
% lower = mu_sig + sd_lung;
% upper = mu_sig + sd_lung;
% mu_sig(lower>0) = upper./2;
% var_new = sd_lung.^2;
% var_new(lower>0) = mu_sig(lower>0).^2;
% c_lung
mu_sig = mu_sig_orig./2;
c_lung = 0.5*(c_lung_orig + mu_sig*mu_sig');
issymmetric(c_lung)
min(eig(c_lung))
% % plot
% F = scatteredInterpolant(x,y,mu_sig); z1 = F(x_samples,y_samples);
% F = scatteredInterpolant(x,y,mu_sig+diag(c_lung)); z2 = F(x_samples,y_samples);
% F = scatteredInterpolant(x,y,mu_sig-diag(c_lung)); z3 = F(x_samples,y_samples);
% figure(998), hold on
% plot(x_samples,z1,'k-')
% plot(x_samples,z2,'k--')
% plot(x_samples,z3,'k--')
% hold off
% stop

% Create the priors

% Gaussians for each node
dnsq = (x-x').^2+(y-y').^2;
G_sig_1 = exp(-1/prior_corr_length^2*dnsq);

% Shape information
G_sig_2 = c_lung;
% min(min(G_sig_2)),max(max(G_sig_2)),min(diag(G_sig_2)),max(diag(G_sig_2)) % PRINTS!

% Lung factor
G_sig_3 = (mu_sig_orig*mu_sig_orig')^0.5;
min(min(G_sig_3)),max(max(G_sig_3)),min(diag(G_sig_3)),max(diag(G_sig_3)) % PRINTS!


% Combined
% G_sig = G_sig_1;                  % no shape info (original)
% G_sig = G_sig_1.*G_sig_2;         % proximity + shape
G_sig = G_sig_1.*G_sig_2*G_sig_3;   % proximity + shape + lung factor

% Add small values to diag
G_sig = G_sig + 1e-6*eye(nn);


% % Plot G_sig_2
% for i = [100 200 300 400 500]%[1485,194,157,1077] % y(find((x>50) & (x<51)))
%     figure(2e4+i), trisurf(Tris,x,y,G_sig_2(:,i))
%     view(2), shading interp, axis equal, axis off
% %     caxis([0,1])
% end
% % % Plot G_sig
% % for i = [100 200 300 400 500]%[1485,194,157,1077] % y(find((x>50) & (x<51)))
% %     figure(1e4+i), trisurf(Tris,x,y,G_sig(:,i))
% %     view(2), shading interp, axis equal, axis off
% % %     caxis([0,1])
% % end
% stop


% Regularisation matrix (?)
% Upper triangular of (?) sigma (Cholesky factorisation)
L_sig = chol(inv(G_sig));


% % Plot the priors
scrnwh = get(0,'screensize');
if do_plot
    rd = randn(nn,npriors);             % random for each node and prior
    draw = mu_sig+L_sig\rd;             % to visualise the priors
    subpltdim = ceil(sqrt(npriors));    % dimension of subplot to show priors
    for ii = 1:npriors
        figure(102); subplot(subpltdim,subpltdim,ii)
        f2w = 600; f2h = 500; set(gcf,'Position',[scrnwh(3)-f2w scrnwh(4)-f2h f2w f2h])
        trisurf(Tris,x,y,draw(:,ii))
        view(2), shading interp, daspect([1,1,1]), axis off
        cb = colorbar; cb.TickLabelInterpreter = 'latex';
        caxis([min(draw(:)),max(draw(:))]), set(gca,'fontsize',10)
        title(strcat('prior sample',{' '},int2str(ii)),'interpreter','latex')
        drawnow
    end
end

end